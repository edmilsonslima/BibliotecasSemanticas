# -*- coding: utf-8 -*-
"""MelhoriaMichaelis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17bm0xUFMIicqj6QHLMDtX6Enl9OhtcaY
"""

from bs4 import BeautifulSoup
import requests
import re

# Definição dos parâmetros
URL = "https://michaelis.uol.com.br/moderno-portugues/busca/portugues-brasileiro/manga"
HEADERS = {
    "User-Agent": "Chrome/114.0.0.0"
}

# Função para obter o objeto BeautifulSoup com tratamento de erros
def get_soup(url, headers=None, params=None):
    try:
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()  # Levanta um erro caso o status HTTP seja diferente de 200
        return BeautifulSoup(response.text, "html.parser")
    except requests.exceptions.RequestException as e:
        raise Exception(f"Erro ao acessar a página: {e}")

# Função para formatar o conteúdo principal das definições
def format_definition_content(content):
    formatted_lines = []
    lines = content.split("\n")
    current_line = ""

    for line in lines:
        if line.strip().startswith(tuple(str(i) for i in range(1, 200))):  # Suporte para até 100 definições
            if current_line:
                formatted_lines.append(current_line.strip())
            current_line = line.strip()
        else:
            current_line += f" {line.strip()}"

    if current_line:
        formatted_lines.append(current_line.strip())

    return formatted_lines

# Função para extrair seções e dividir frases após pontos finais
def extract_section(content, section_name):
    start_idx = content.find(section_name)
    if start_idx != -1:
        # Extrai o conteúdo da seção
        section_content = content[start_idx + len(section_name):].strip()

        # Localiza o fim da seção (baseado em uma nova seção ou separação dupla de linha)
        next_section_start = section_content.find("\n\n")
        if next_section_start != -1:
            section_content = section_content[:next_section_start].strip()

        # Divide as frases com base nos pontos finais
        sentences = section_content.split(".")
        formatted_sentences = [sentence.strip() + "." for sentence in sentences if sentence.strip()]
        return formatted_sentences
    return []

# Função para exibir o conteúdo formatado de uma seção
def print_section(content, section_name):
    section_sentences = extract_section(content, section_name)
    if section_sentences:
        print(f"\n{section_name.upper()}")
        for sentence in section_sentences:
          sentence = sentence.replace("\n", " ").strip()
          indice = sentence.find("ETIMOLOGIA")
          if indice == -1:
            sentence_temp = re.sub(r"\b([A-Za-z])\.", r"\1<MARK>", sentence)
            frases = re.split(r"\.\s+", sentence_temp)
            frases = [re.sub(r"<MARK>", ".", frase) for frase in frases]
            for frase in frases:
                print(frase)


# Função principal para extrair e imprimir os dados
def extract_and_print_content(url, headers):
    try:
        # Obter o conteúdo da página
        soup = get_soup(url, headers)

        # Procurar o elemento principal
        definition_block = soup.find("div", class_="verbete bs-component")

        if not definition_block:
            print("Nenhuma definição encontrada.")
            return

        # Extração e formatação do conteúdo principal
        content = definition_block.get_text(separator="\n", strip=True)
        formatted_content = format_definition_content(content)

        # Exibir Gramatical
        if formatted_content:  # Verifica se há conteúdo na lista
            words = re.findall(r'\S+', formatted_content[0])
            if len(words) == 3:  # Verifica se há pelo menos três palavras
                print("PALAVRA:", words[0])
                print("ORTOGRAFIA:", words[1])
                print("GRAMÁTICA:", words[2])
            elif len(words) == 1:
              words_indice = re.findall(r'\S+', formatted_content[1])
              print("PALAVRA:", formatted_content[0])
              print("ORTOGRAFIA:", words_indice[1])
              print("GRAMÁTICA:", words_indice[2])
            else:
              print("Formato inesperado na primeira linha. Não foi possível identificar todas as partes.")
        else:
            print("Nenhum conteúdo formatado encontrado.")

        # Exibir definições
        print("\nDEFINIÇÕES")
        for line in formatted_content:
          if line != formatted_content[0]:
            if line.find("EXPRESSÕES") == -1:
              print(line)
            else:
              break

        # Extração e exibição de EXPRESSÕES
        print_section(content, "EXPRESSÕES")

        # Extração e exibição de ETIMOLOGIA
        print_section(content, "ETIMOLOGIA")

    except Exception as e:
        print(f"Erro ao processar os dados: {e}")

# Executar a extração
extract_and_print_content(URL, HEADERS)